package hu.unideb.inf;

import static org.junit.Assert.assertEquals;

import hu.unideb.inf.Sudoku;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.custommonkey.xmlunit.XMLUnit;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

public class TestSudokuXML16x16 {
	private Sudoku16x16 sudoku;

	@Before
	public void setUp() throws Exception {
		sudoku = new Sudoku16x16();
	}

	@After
	public void tearDown() throws Exception {
		sudoku = null;
	}

	@Test
	public void testLementTabla() {
		sudoku.szamBeirasa(0, 0, 9);
		sudoku.szamBeirasa(1, 0, 3);
		sudoku.szamBeirasa(2, 0, 4);
		sudoku.szamBeirasa(3, 0, 2);
		sudoku.szamBeirasa(4, 0, 6);
		sudoku.szamBeirasa(5, 0, 11);
		sudoku.szamBeirasa(6, 0, 1);
		sudoku.szamBeirasa(7, 0, 5);
		sudoku.szamBeirasa(8, 0, 15);
		sudoku.szamBeirasa(9, 0, 13);
		sudoku.szamBeirasa(10, 0, 10);
		sudoku.szamBeirasa(11, 0, 12);
		sudoku.szamBeirasa(12, 0, 8);
		sudoku.szamBeirasa(13, 0, 14);
		sudoku.szamBeirasa(14, 0, 7);
		sudoku.szamBeirasa(15, 0, 16);
		sudoku.szamBeirasa(0, 1, 14);
		sudoku.szamBeirasa(1, 1, 13);
		sudoku.szamBeirasa(2, 1, 8);
		sudoku.szamBeirasa(3, 1, 1);
		sudoku.szamBeirasa(4, 1, 12);
		sudoku.szamBeirasa(5, 1, 15);
		sudoku.szamBeirasa(6, 1, 4);
		sudoku.szamBeirasa(7, 1, 7);
		sudoku.szamBeirasa(8, 1, 9);
		sudoku.szamBeirasa(9, 1, 5);
		sudoku.szamBeirasa(10, 1, 16);
		sudoku.szamBeirasa(11, 1, 11);
		sudoku.szamBeirasa(12, 1, 2);
		sudoku.szamBeirasa(13, 1, 3);
		sudoku.szamBeirasa(14, 1, 10);
		sudoku.szamBeirasa(15, 1, 6);
		sudoku.szamBeirasa(0, 2, 11);
		sudoku.szamBeirasa(1, 2, 6);
		sudoku.szamBeirasa(2, 2, 10);
		sudoku.szamBeirasa(3, 2, 5);
		sudoku.szamBeirasa(4, 2, 3);
		sudoku.szamBeirasa(5, 2, 13);
		sudoku.szamBeirasa(6, 2, 8);
		sudoku.szamBeirasa(7, 2, 16);
		sudoku.szamBeirasa(8, 2, 2);
		sudoku.szamBeirasa(9, 2, 7);
		sudoku.szamBeirasa(10, 2, 14);
		sudoku.szamBeirasa(11, 2, 4);
		sudoku.szamBeirasa(12, 2, 12);
		sudoku.szamBeirasa(13, 2, 9);
		sudoku.szamBeirasa(14, 2, 15);
		sudoku.szamBeirasa(15, 2, 1);
		sudoku.szamBeirasa(0, 3, 12);
		sudoku.szamBeirasa(1, 3, 16);
		sudoku.szamBeirasa(2, 3, 15);
		sudoku.szamBeirasa(3, 3, 7);
		sudoku.szamBeirasa(4, 3, 9);
		sudoku.szamBeirasa(5, 3, 2);
		sudoku.szamBeirasa(6, 3, 14);
		sudoku.szamBeirasa(7, 3, 10);
		sudoku.szamBeirasa(8, 3, 8);
		sudoku.szamBeirasa(9, 3, 3);
		sudoku.szamBeirasa(10, 3, 6);
		sudoku.szamBeirasa(11, 3, 1);
		sudoku.szamBeirasa(12, 3, 4);
		sudoku.szamBeirasa(13, 3, 5);
		sudoku.szamBeirasa(14, 3, 13);
		sudoku.szamBeirasa(15, 3, 11);
		sudoku.szamBeirasa(0, 4, 2);
		sudoku.szamBeirasa(1, 4, 15);
		sudoku.szamBeirasa(2, 4, 14);
		sudoku.szamBeirasa(3, 4, 3);
		sudoku.szamBeirasa(4, 4, 10);
		sudoku.szamBeirasa(5, 4, 16);
		sudoku.szamBeirasa(6, 4, 9);
		sudoku.szamBeirasa(7, 4, 6);
		sudoku.szamBeirasa(8, 4, 4);
		sudoku.szamBeirasa(9, 4, 12);
		sudoku.szamBeirasa(10, 4, 7);
		sudoku.szamBeirasa(11, 4, 13);
		sudoku.szamBeirasa(12, 4, 5);
		sudoku.szamBeirasa(13, 4, 11);
		sudoku.szamBeirasa(14, 4, 1);
		sudoku.szamBeirasa(15, 4, 8);
		sudoku.szamBeirasa(0, 5, 4);
		sudoku.szamBeirasa(1, 5, 1);
		sudoku.szamBeirasa(2, 5, 7);
		sudoku.szamBeirasa(3, 5, 9);
		sudoku.szamBeirasa(4, 5, 5);
		sudoku.szamBeirasa(5, 5, 3);
		sudoku.szamBeirasa(6, 5, 11);
		sudoku.szamBeirasa(7, 5, 13);
		sudoku.szamBeirasa(8, 5, 14);
		sudoku.szamBeirasa(9, 5, 10);
		sudoku.szamBeirasa(10, 5, 8);
		sudoku.szamBeirasa(11, 5, 16);
		sudoku.szamBeirasa(12, 5, 15);
		sudoku.szamBeirasa(13, 5, 2);
		sudoku.szamBeirasa(14, 5, 6);
		sudoku.szamBeirasa(15, 5, 12);
		sudoku.szamBeirasa(0, 6, 16);
		sudoku.szamBeirasa(1, 6, 5);
		sudoku.szamBeirasa(2, 6, 6);
		sudoku.szamBeirasa(3, 6, 12);
		sudoku.szamBeirasa(4, 6, 15);
		sudoku.szamBeirasa(5, 6, 1);
		sudoku.szamBeirasa(6, 6, 7);
		sudoku.szamBeirasa(7, 6, 8);
		sudoku.szamBeirasa(8, 6, 11);
		sudoku.szamBeirasa(9, 6, 2);
		sudoku.szamBeirasa(10, 6, 3);
		sudoku.szamBeirasa(11, 6, 9);
		sudoku.szamBeirasa(12, 6, 10);
		sudoku.szamBeirasa(13, 6, 4);
		sudoku.szamBeirasa(14, 6, 14);
		sudoku.szamBeirasa(15, 6, 13);
		sudoku.szamBeirasa(0, 7, 8);
		sudoku.szamBeirasa(1, 7, 10);
		sudoku.szamBeirasa(2, 7, 13);
		sudoku.szamBeirasa(3, 7, 11);
		sudoku.szamBeirasa(4, 7, 2);
		sudoku.szamBeirasa(5, 7, 14);
		sudoku.szamBeirasa(6, 7, 12);
		sudoku.szamBeirasa(7, 7, 4);
		sudoku.szamBeirasa(8, 7, 1);
		sudoku.szamBeirasa(9, 7, 15);
		sudoku.szamBeirasa(10, 7, 5);
		sudoku.szamBeirasa(11, 7, 6);
		sudoku.szamBeirasa(12, 7, 3);
		sudoku.szamBeirasa(13, 7, 7);
		sudoku.szamBeirasa(14, 7, 16);
		sudoku.szamBeirasa(15, 7, 9);
		sudoku.szamBeirasa(0, 8, 3);
		sudoku.szamBeirasa(1, 8, 4);
		sudoku.szamBeirasa(2, 8, 2);
		sudoku.szamBeirasa(3, 8, 14);
		sudoku.szamBeirasa(4, 8, 7);
		sudoku.szamBeirasa(5, 8, 9);
		sudoku.szamBeirasa(6, 8, 6);
		sudoku.szamBeirasa(7, 8, 15);
		sudoku.szamBeirasa(8, 8, 13);
		sudoku.szamBeirasa(9, 8, 16);
		sudoku.szamBeirasa(10, 8, 12);
		sudoku.szamBeirasa(11, 8, 10);
		sudoku.szamBeirasa(12, 8, 11);
		sudoku.szamBeirasa(13, 8, 1);
		sudoku.szamBeirasa(14, 8, 8);
		sudoku.szamBeirasa(15, 8, 5);
		sudoku.szamBeirasa(0, 9, 13);
		sudoku.szamBeirasa(1, 9, 12);
		sudoku.szamBeirasa(2, 9, 9);
		sudoku.szamBeirasa(3, 9, 6);
		sudoku.szamBeirasa(4, 9, 4);
		sudoku.szamBeirasa(5, 9, 5);
		sudoku.szamBeirasa(6, 9, 3);
		sudoku.szamBeirasa(7, 9, 1);
		sudoku.szamBeirasa(8, 9, 7);
		sudoku.szamBeirasa(9, 9, 11);
		sudoku.szamBeirasa(10, 9, 15);
		sudoku.szamBeirasa(11, 9, 8);
		sudoku.szamBeirasa(12, 9, 14);
		sudoku.szamBeirasa(13, 9, 16);
		sudoku.szamBeirasa(14, 9, 2);
		sudoku.szamBeirasa(15, 9, 10);
		sudoku.szamBeirasa(0, 10, 15);
		sudoku.szamBeirasa(1, 10, 11);
		sudoku.szamBeirasa(2, 10, 16);
		sudoku.szamBeirasa(3, 10, 8);
		sudoku.szamBeirasa(4, 10, 14);
		sudoku.szamBeirasa(5, 10, 10);
		sudoku.szamBeirasa(6, 10, 2);
		sudoku.szamBeirasa(7, 10, 12);
		sudoku.szamBeirasa(8, 10, 5);
		sudoku.szamBeirasa(9, 10, 1);
		sudoku.szamBeirasa(10, 10, 9);
		sudoku.szamBeirasa(11, 10, 3);
		sudoku.szamBeirasa(12, 10, 13);
		sudoku.szamBeirasa(13, 10, 6);
		sudoku.szamBeirasa(14, 10, 4);
		sudoku.szamBeirasa(15, 10, 7);
		sudoku.szamBeirasa(0, 11, 1);
		sudoku.szamBeirasa(1, 11, 7);
		sudoku.szamBeirasa(2, 11, 5);
		sudoku.szamBeirasa(3, 11, 10);
		sudoku.szamBeirasa(4, 11, 13);
		sudoku.szamBeirasa(5, 11, 8);
		sudoku.szamBeirasa(6, 11, 16);
		sudoku.szamBeirasa(7, 11, 11);
		sudoku.szamBeirasa(8, 11, 6);
		sudoku.szamBeirasa(9, 11, 14);
		sudoku.szamBeirasa(10, 11, 4);
		sudoku.szamBeirasa(11, 11, 2);
		sudoku.szamBeirasa(12, 11, 9);
		sudoku.szamBeirasa(13, 11, 15);
		sudoku.szamBeirasa(14, 11, 12);
		sudoku.szamBeirasa(15, 11, 3);
		sudoku.szamBeirasa(0, 12, 6);
		sudoku.szamBeirasa(1, 12, 2);
		sudoku.szamBeirasa(2, 12, 3);
		sudoku.szamBeirasa(3, 12, 4);
		sudoku.szamBeirasa(4, 12, 16);
		sudoku.szamBeirasa(5, 12, 7);
		sudoku.szamBeirasa(6, 12, 5);
		sudoku.szamBeirasa(7, 12, 9);
		sudoku.szamBeirasa(8, 12, 10);
		sudoku.szamBeirasa(9, 12, 8);
		sudoku.szamBeirasa(10, 12, 13);
		sudoku.szamBeirasa(11, 12, 15);
		sudoku.szamBeirasa(12, 12, 1);
		sudoku.szamBeirasa(13, 12, 12);
		sudoku.szamBeirasa(14, 12, 11);
		sudoku.szamBeirasa(15, 12, 14);
		sudoku.szamBeirasa(0, 13, 10);
		sudoku.szamBeirasa(1, 13, 9);
		sudoku.szamBeirasa(2, 13, 12);
		sudoku.szamBeirasa(3, 13, 13);
		sudoku.szamBeirasa(4, 13, 11);
		sudoku.szamBeirasa(5, 13, 6);
		sudoku.szamBeirasa(6, 13, 15);
		sudoku.szamBeirasa(7, 13, 14);
		sudoku.szamBeirasa(8, 13, 3);
		sudoku.szamBeirasa(9, 13, 4);
		sudoku.szamBeirasa(10, 13, 1);
		sudoku.szamBeirasa(11, 13, 7);
		sudoku.szamBeirasa(12, 13, 16);
		sudoku.szamBeirasa(13, 13, 8);
		sudoku.szamBeirasa(14, 13, 5);
		sudoku.szamBeirasa(15, 13, 2);
		sudoku.szamBeirasa(0, 14, 7);
		sudoku.szamBeirasa(1, 14, 14);
		sudoku.szamBeirasa(2, 14, 1);
		sudoku.szamBeirasa(3, 14, 15);
		sudoku.szamBeirasa(4, 14, 8);
		sudoku.szamBeirasa(5, 14, 12);
		sudoku.szamBeirasa(6, 14, 10);
		sudoku.szamBeirasa(7, 14, 2);
		sudoku.szamBeirasa(8, 14, 16);
		sudoku.szamBeirasa(9, 14, 9);
		sudoku.szamBeirasa(10, 14, 11);
		sudoku.szamBeirasa(11, 14, 5);
		sudoku.szamBeirasa(12, 14, 6);
		sudoku.szamBeirasa(13, 14, 13);
		sudoku.szamBeirasa(14, 14, 3);
		sudoku.szamBeirasa(15, 14, 4);
		sudoku.szamBeirasa(0, 15, 5);
		sudoku.szamBeirasa(1, 15, 8);
		sudoku.szamBeirasa(2, 15, 11);
		sudoku.szamBeirasa(3, 15, 16);
		sudoku.szamBeirasa(4, 15, 1);
		sudoku.szamBeirasa(5, 15, 4);
		sudoku.szamBeirasa(6, 15, 13);
		sudoku.szamBeirasa(7, 15, 3);
		sudoku.szamBeirasa(8, 15, 12);
		sudoku.szamBeirasa(9, 15, 6);
		sudoku.szamBeirasa(10, 15, 2);
		sudoku.szamBeirasa(11, 15, 14);
		sudoku.szamBeirasa(12, 15, 7);
		sudoku.szamBeirasa(13, 15, 10);
		sudoku.szamBeirasa(14, 15, 9);
		sudoku.szamBeirasa(15, 15, 15);
		for (int i = 0; i < 16; i++) {
			for (int j = 0; j < 16; j++) {
				if (sudoku.getErtek(i, j) != 0) {
					sudoku.setModosithatosag(j, i, false);
				}
			}
		}
		try {
			File f = new File("C:/Users/Zsolt/Desktop/proba16x16.xml");
			f.createNewFile();
			SudokuXML16x16.lementTabla(sudoku, f.getAbsolutePath());
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = dbf.newDocumentBuilder();
			Document actual = builder.parse(f.getAbsolutePath());
			Document expected = builder.parse(TestSudokuXML16x16.class
					.getResource("/proba16x16.xml").toString());
			XMLUnit.setIgnoreWhitespace(true);
			assertEquals(XMLUnit.compareXML(expected, actual).similar(), true);
			f.delete();
		} catch (IOException | SAXException | ParserConfigurationException e) {
			assert false;
		}
	}

	@Test
	public void testBetoltTabla() {
		int[][] e = new int[16][16];
		e[0][0] = 9;
		e[0][1] = 3;
		e[0][2] = 4;
		e[0][3] = 2;
		e[0][4] = 6;
		e[0][5] = 11;
		e[0][6] = 1;
		e[0][7] = 5;
		e[0][8] = 15;
		e[0][9] = 13;
		e[0][10] = 10;
		e[0][11] = 12;
		e[0][12] = 8;
		e[0][13] = 14;
		e[0][14] = 7;
		e[0][15] = 16;
		e[1][0] = 14;
		e[1][1] = 13;
		e[1][2] = 8;
		e[1][3] = 1;
		e[1][4] = 12;
		e[1][5] = 15;
		e[1][6] = 4;
		e[1][7] = 7;
		e[1][8] = 9;
		e[1][9] = 5;
		e[1][10] = 16;
		e[1][11] = 11;
		e[1][12] = 2;
		e[1][13] = 3;
		e[1][14] = 10;
		e[1][15] = 6;
		e[2][0] = 11;
		e[2][1] = 6;
		e[2][2] = 10;
		e[2][3] = 5;
		e[2][4] = 3;
		e[2][5] = 13;
		e[2][6] = 8;
		e[2][7] = 16;
		e[2][8] = 2;
		e[2][9] = 7;
		e[2][10] = 14;
		e[2][11] = 4;
		e[2][12] = 12;
		e[2][13] = 9;
		e[2][14] = 15;
		e[2][15] = 1;
		e[3][0] = 12;
		e[3][1] = 16;
		e[3][2] = 15;
		e[3][3] = 7;
		e[3][4] = 9;
		e[3][5] = 2;
		e[3][6] = 14;
		e[3][7] = 10;
		e[3][8] = 8;
		e[3][9] = 3;
		e[3][10] = 6;
		e[3][11] = 1;
		e[3][12] = 4;
		e[3][13] = 5;
		e[3][14] = 13;
		e[3][15] = 11;
		e[4][0] = 2;
		e[4][1] = 15;
		e[4][2] = 14;
		e[4][3] = 3;
		e[4][4] = 10;
		e[4][5] = 16;
		e[4][6] = 9;
		e[4][7] = 6;
		e[4][8] = 4;
		e[4][9] = 12;
		e[4][10] = 7;
		e[4][11] = 13;
		e[4][12] = 5;
		e[4][13] = 11;
		e[4][14] = 1;
		e[4][15] = 8;
		e[5][0] = 4;
		e[5][1] = 1;
		e[5][2] = 7;
		e[5][3] = 9;
		e[5][4] = 5;
		e[5][5] = 3;
		e[5][6] = 11;
		e[5][7] = 13;
		e[5][8] = 14;
		e[5][9] = 10;
		e[5][10] = 8;
		e[5][11] = 16;
		e[5][12] = 15;
		e[5][13] = 2;
		e[5][14] = 6;
		e[5][15] = 12;
		e[6][0] = 16;
		e[6][1] = 5;
		e[6][2] = 6;
		e[6][3] = 12;
		e[6][4] = 15;
		e[6][5] = 1;
		e[6][6] = 7;
		e[6][7] = 8;
		e[6][8] = 11;
		e[6][9] = 2;
		e[6][10] = 3;
		e[6][11] = 9;
		e[6][12] = 10;
		e[6][13] = 4;
		e[6][14] = 14;
		e[6][15] = 13;
		e[7][0] = 8;
		e[7][1] = 10;
		e[7][2] = 13;
		e[7][3] = 11;
		e[7][4] = 2;
		e[7][5] = 14;
		e[7][6] = 12;
		e[7][7] = 4;
		e[7][8] = 1;
		e[7][9] = 15;
		e[7][10] = 5;
		e[7][11] = 6;
		e[7][12] = 3;
		e[7][13] = 7;
		e[7][14] = 16;
		e[7][15] = 9;
		e[8][0] = 3;
		e[8][1] = 4;
		e[8][2] = 2;
		e[8][3] = 14;
		e[8][4] = 7;
		e[8][5] = 9;
		e[8][6] = 6;
		e[8][7] = 15;
		e[8][8] = 13;
		e[8][9] = 16;
		e[8][10] = 12;
		e[8][11] = 10;
		e[8][12] = 11;
		e[8][13] = 1;
		e[8][14] = 8;
		e[8][15] = 5;
		e[9][0] = 13;
		e[9][1] = 12;
		e[9][2] = 9;
		e[9][3] = 6;
		e[9][4] = 4;
		e[9][5] = 5;
		e[9][6] = 3;
		e[9][7] = 1;
		e[9][8] = 7;
		e[9][9] = 11;
		e[9][10] = 15;
		e[9][11] = 8;
		e[9][12] = 14;
		e[9][13] = 16;
		e[9][14] = 2;
		e[9][15] = 10;
		e[10][0] = 15;
		e[10][1] = 11;
		e[10][2] = 16;
		e[10][3] = 8;
		e[10][4] = 14;
		e[10][5] = 10;
		e[10][6] = 2;
		e[10][7] = 12;
		e[10][8] = 5;
		e[10][9] = 1;
		e[10][10] = 9;
		e[10][11] = 3;
		e[10][12] = 13;
		e[10][13] = 6;
		e[10][14] = 4;
		e[10][15] = 7;
		e[11][0] = 1;
		e[11][1] = 7;
		e[11][2] = 5;
		e[11][3] = 10;
		e[11][4] = 13;
		e[11][5] = 8;
		e[11][6] = 16;
		e[11][7] = 11;
		e[11][8] = 6;
		e[11][9] = 14;
		e[11][10] = 4;
		e[11][11] = 2;
		e[11][12] = 9;
		e[11][13] = 15;
		e[11][14] = 12;
		e[11][15] = 3;
		e[12][0] = 6;
		e[12][1] = 2;
		e[12][2] = 3;
		e[12][3] = 4;
		e[12][4] = 16;
		e[12][5] = 7;
		e[12][6] = 5;
		e[12][7] = 9;
		e[12][8] = 10;
		e[12][9] = 8;
		e[12][10] = 13;
		e[12][11] = 15;
		e[12][12] = 1;
		e[12][13] = 12;
		e[12][14] = 11;
		e[12][15] = 14;
		e[13][0] = 10;
		e[13][1] = 9;
		e[13][2] = 12;
		e[13][3] = 13;
		e[13][4] = 11;
		e[13][5] = 6;
		e[13][6] = 15;
		e[13][7] = 14;
		e[13][8] = 3;
		e[13][9] = 4;
		e[13][10] = 1;
		e[13][11] = 7;
		e[13][12] = 16;
		e[13][13] = 8;
		e[13][14] = 5;
		e[13][15] = 2;
		e[14][0] = 7;
		e[14][1] = 14;
		e[14][2] = 1;
		e[14][3] = 15;
		e[14][4] = 8;
		e[14][5] = 12;
		e[14][6] = 10;
		e[14][7] = 2;
		e[14][8] = 16;
		e[14][9] = 9;
		e[14][10] = 11;
		e[14][11] = 5;
		e[14][12] = 6;
		e[14][13] = 13;
		e[14][14] = 3;
		e[14][15] = 4;
		e[15][0] = 5;
		e[15][1] = 8;
		e[15][2] = 11;
		e[15][3] = 16;
		e[15][4] = 1;
		e[15][5] = 4;
		e[15][6] = 13;
		e[15][7] = 3;
		e[15][8] = 12;
		e[15][9] = 6;
		e[15][10] = 2;
		e[15][11] = 14;
		e[15][12] = 7;
		e[15][13] = 10;
		e[15][14] = 9;
		e[15][15] = 15;

		SudokuXML16x16.betoltTabla(sudoku,
				TestSudokuXML16x16.class.getResource("/proba16x16.xml").toString(),
				0);
		for (int i = 0; i < 16; i++) {
			for (int j = 0; j < 16; j++) {
				assertEquals(e[i][j], sudoku.getErtek(i, j));
			}
		}
	}

}
